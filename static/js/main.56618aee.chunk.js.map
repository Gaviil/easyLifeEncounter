{"version":3,"sources":["ListEncounter.jsx","App.js","reportWebVitals.js","index.js"],"names":["listEncounter","props","state","hp","handleInputChange","bind","event","target","value","name","this","setState","encounter","currentPercent","currentHealth","maxHealth","style","flex","marginTop","color","borderWidth","borderBottomWidth","outline","marginInline","paddingInline","borderColor","backgroundColor","min","type","onChange","fontWeight","fontSize","onClick","updateHealth","index","parseInt","marginLeft","duplicate","remove","position","width","height","top","opacity","React","Component","App","i","JSON","stringify","saveDataLocal","localStorage","setItem","selectColorBar","length","clearAll","heathPoint","parse","getItem","handleClick","e","push","preventDefault","document","body","padding","display","flexDirection","map","ListEncounter","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4OA0JeA,E,kDAvJb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,GAAI,MAGN,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBANR,E,8DASDC,GAChB,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfC,EAAOF,EAAOE,KACpBC,KAAKC,SAAL,eACGF,EAAOD,M,+BAIF,IAAD,OACAI,EAAaF,KAAKT,MAAlBW,UACDC,EAA4C,IAA1BD,EAAUE,cAAuBF,EAAUG,UACnE,OACE,sBAAKC,MAAO,CAACC,KAAM,EAAGC,UAAW,IAAjC,UACE,oBAAGF,MAAO,CAACG,MAAO,OAAQD,UAAW,GAArC,UAA0CN,EAAUH,KAApD,OACA,oBAAGO,MAAO,CAACG,MAAO,OAAQD,UAAW,GAArC,UAA0CN,EAAUE,cAApD,MAAsEF,EAAUG,UAC9E,uBACEC,MAAO,CACLI,YAAa,EACbC,kBAAmB,EACnBC,QAAS,OACTC,aAAc,GACdC,cAAe,EACfC,YAAa,OACbC,gBAAiB,UACjBP,MAAO,QAETQ,IAAK,EACLlB,KAAK,KACLmB,KAAK,SACLpB,MAAOE,KAAKR,MAAMC,GAClB0B,SAAUnB,KAAKN,oBACjB,wBACEY,MAAO,CACLU,gBAAiB,UACjBN,YAAa,EACbD,MAAO,UACPW,WAAY,OACZC,SAAU,GACVT,QAAS,QAEXU,QAAS,WACT,EAAK/B,MAAMgC,aAAa,EAAKhC,MAAMiC,MAAOC,SAAS,EAAKjC,MAAMC,IAAK,UAVrE,oBAeA,wBACEa,MAAO,CACLU,gBAAiB,UACjBN,YAAa,EACbD,MAAO,UACPW,WAAY,OACZC,SAAU,GACVT,QAAS,QAEXU,QAAS,WACT,EAAK/B,MAAMgC,aAAa,EAAKhC,MAAMiC,MAAOC,SAAS,EAAKjC,MAAMC,IAAK,OAVrE,kBAeD,wBACGa,MAAO,CACLoB,WAAY,IACZV,gBAAiB,UACjBN,YAAa,EACbD,MAAO,UACPW,WAAY,OACZC,SAAU,GACVT,QAAS,QAEXU,QAAS,WACT,EAAK/B,MAAMoC,UAAU,EAAKpC,MAAMiC,QAXnC,uBAgBC,wBACElB,MAAO,CACLoB,WAAY,GACZV,gBAAiB,UACjBN,YAAa,EACbD,MAAO,UACPW,WAAY,OACZC,SAAU,GACVT,QAAS,QAEXU,QAAS,WACT,EAAK/B,MAAMqC,OAAO,EAAKrC,MAAMiC,QAX/B,uBAiBF,sBACElB,MAAO,CACLuB,SAAU,WACVC,MAAO,IACPC,OAAQ,GACRf,gBAAiB,QALrB,UAOI,qBACAV,MAAO,CACLwB,MAAM,GAAD,OAAK3B,EAAL,KACL4B,OAAQ,OACRf,gBAAiBhB,KAAKT,MAAMkB,OAAS,aAGzC,sBACEH,MAAO,CACLwB,MAAO,OACPC,OAAQ,OACRF,SAAS,WACTG,IAAK,GALT,UAOE,wBACE1B,MAAO,CACLwB,MAAO,MACPC,OAAO,OACPE,QAAS,GAEXX,QAAS,kBAAM,EAAK/B,MAAMgC,aAAa,EAAKhC,MAAMiC,MAAO,EAAG,YAG9D,wBACElB,MAAO,CACLwB,MAAO,MACPC,OAAO,OACPE,QAAS,GAEXX,QAAS,kBAAM,EAAK/B,MAAMgC,aAAa,EAAKhC,MAAMiC,MAAO,EAAG,sB,GA7I9CU,IAAMC,WCkNnBC,E,kDAhNb,WAAY7C,GAAQ,IAAD,8BACjB,cAAMA,IAwCRgC,aAAe,SAACc,EAAGvC,EAAOoB,GACxB,IAAMK,EAAe,EAAK/B,MAAMU,UAChC,OAAQgB,GACN,IAAK,KACAO,SAASF,EAAac,GAAGjC,eAAiBN,GAASyB,EAAac,GAAGhC,YACpEkB,EAAac,GAAGjC,cAAgBkC,KAAKC,UAAUd,SAASF,EAAac,GAAGjC,eAAiBN,IAE3F,EAAKG,SAAS,CACZC,UAAWqB,IACX,WACA,EAAKiB,cAAcjB,MAErB,MACF,IAAK,QACAE,SAASF,EAAac,GAAGjC,eAAiBN,GAAS,IACpDyB,EAAac,GAAGjC,cAAgBkC,KAAKC,UAAUd,SAASF,EAAac,GAAGjC,eAAiBN,IAE3F,EAAKG,SAAS,CACZC,UAAWqB,IACX,WACA,EAAKiB,cAAcjB,QA7DR,EAmEnBiB,cAAgB,SAAClD,GACfmD,aAAaC,QAAQ,gBAAiBJ,KAAKC,UAAUjD,KApEpC,EAuEnBqD,eAAiB,SAACN,GAChB,OAAIA,GAAK,EAAK7C,MAAMiB,MAAMmC,OACjB,EAAKpD,MAAMiB,MAAM4B,EAAI,EAAK7C,MAAMiB,MAAMmC,QAExC,EAAKpD,MAAMiB,MAAM4B,IA3EP,EA8EnBQ,SAAW,WACT,EAAK5C,SAAS,CACZC,UAAW,KACV,WACD,EAAKsC,cAAc,QAhFrB,EAAKhD,MAAQ,CACXO,KAAK,GACL+C,WAAY,EACZ5C,UAAWoC,KAAKS,MAAMN,aAAaO,QAAQ,mBAAqB,GAChEvC,MAAO,CACL,UAAW,UAAW,UAAW,UAAW,UAAW,YAG3D,EAAKf,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKsD,YAAc,EAAKA,YAAYtD,KAAjB,gBAXF,E,8DAcDC,GAChB,IAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACfC,EAAOF,EAAOE,KACpBC,KAAKC,SAAL,eACGF,EAAOD,M,kCAIAoD,GAAI,IAAD,OACT5D,EAAgBU,KAAKR,MAAMU,UAC/BZ,EAAc6D,KAAK,CACjBpD,KAAKC,KAAKR,MAAMO,KAChBM,UAAUL,KAAKR,MAAMsD,WACrB1C,cAAcJ,KAAKR,MAAMsD,aAG3B9C,KAAKC,SAAS,CACZF,KAAK,GACL+C,WAAY,EACZ5C,UAAWZ,IACV,WACD,EAAKkD,cAAclD,MAErB4D,EAAEE,mB,+BAiDM,IAAD,OAGP,OAFAC,SAASC,KAAKhD,MAAMU,gBAAkB,UAGpC,sBAAKV,MAAO,CAACiD,QAAS,GAAIC,QAAS,OAAQC,cAAe,UAA1D,UACE,gCACE,uBACEnD,MAAO,CACLiD,QAAS,EACTC,QAAS,OACTC,cAAe,SACfzC,gBAAgB,WALpB,UAOE,wBAAOV,MAAO,CAACG,MAAO,QAAtB,mBAEE,uBACEV,KAAK,OACLmB,KAAK,OACLZ,MAAO,CACLE,UAAW,GACXE,YAAa,EACbC,kBAAmB,EACnBC,QAAS,OACTC,aAAc,GACdC,cAAe,EACfC,YAAa,OACbC,gBAAiB,UACjBP,MAAO,QAETX,MAAOE,KAAKR,MAAMO,KAClBoB,SAAUnB,KAAKN,uBAEnB,wBAAOY,MAAO,CAACG,MAAO,QAAtB,0BAEE,uBACEQ,IAAK,EACLlB,KAAK,aACLmB,KAAK,SACLZ,MAAO,CACLE,UAAW,GACXsB,MAAO,IACPpB,YAAa,EACbC,kBAAmB,EACnBC,QAAS,OACTC,aAAc,GACdC,cAAe,EACfC,YAAa,OACbC,gBAAiB,UACjBP,MAAO,QAETX,MAAOE,KAAKR,MAAMsD,WAClB3B,SAAUnB,KAAKN,uBAErB,wBACE4B,QAAStB,KAAKiD,YACd3C,MAAO,CACLE,UAAW,GACXQ,gBAAiB,UACjBc,MAAO,IACPpB,YAAa,EACbD,MAAO,UACPW,WAAY,OACZC,SAAU,GACVT,QAAS,QAVb,uBAgBF,wBACEU,QAAS,kBAAM,EAAKuB,YACpBvC,MAAO,CACHE,UAAW,EACXQ,gBAAiB,UACjBN,YAAa,EACboB,MAAO,IACPrB,MAAO,UACPW,WAAY,OACZC,SAAU,GACVT,QAAS,QAVf,0BAgBA,8BACGZ,KAAKR,MAAMU,UAAUwD,KAAI,SAAC5D,EAAM0B,GAAP,OACvB,cAACmC,EAAD,CAECzD,UAAWJ,EACX0B,MAAOA,EACPf,MAAO,EAAKkC,eAAenB,GAC3BD,aAAc,SAACc,EAAGvC,EAAOoB,GAAX,OAAoB,EAAKK,aAAac,EAAGvC,EAAOoB,IAC9DS,UAAW,SAACU,GACV,IAAM/C,EAAgB,EAAKE,MAAMU,UACjCZ,EAAc6D,KAAK7D,EAAc+C,IACjC,EAAKpC,SAAS,CACZC,UAAWZ,IACV,WACH,EAAKkD,cAAclD,OAGrBsC,OAAQ,SAACS,GACP,IAAM/C,EAAgB,EAAKE,MAAMU,UACjCZ,EAAcsE,OAAOvB,EAAE,GACvB,EAAKpC,SAAS,CACZC,UAAWZ,IACX,WACA,EAAKkD,cAAclD,QApBlBkC,e,GAhLDU,IAAMC,WCST0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,CAAkBlE,MAAO,CAACkD,QAAS,OAAQzB,OAAQ,QAAnD,SACE,cAAC,EAAD,CAAKzB,MAAO,CAACkD,QAAS,OAAQzB,OAAQ,YAExCsB,SAASoB,eAAe,SAM1BZ,M","file":"static/js/main.56618aee.chunk.js","sourcesContent":["import React from 'react';\n\nclass listEncounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hp: null\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const {encounter} = this.props;\n    const currentPercent = (encounter.currentHealth * 100) / encounter.maxHealth; \n    return (\n      <div style={{flex: 1, marginTop: 20}}>\n        <p style={{color: '#fff', marginTop: 2}}>{encounter.name} </p>\n        <p style={{color: '#fff', marginTop: 2}}>{encounter.currentHealth} / {encounter.maxHealth}\n          <input\n            style={{\n              borderWidth: 0,\n              borderBottomWidth: 1,\n              outline: 'none',\n              marginInline: 10,\n              paddingInline: 5,\n              borderColor: '#fff',\n              backgroundColor: '#002245',\n              color: '#fff'\n            }}\n            min={1}\n            name=\"hp\"\n            type=\"number\"\n            value={this.state.hp}\n            onChange={this.handleInputChange} />\n          <button\n            style={{\n              backgroundColor: '#002245',\n              borderWidth: 0,\n              color: '#ff3064',\n              fontWeight: 'bold',\n              fontSize: 18,\n              outline: 'none',\n            }}\n            onClick={() => {\n            this.props.updateHealth(this.props.index, parseInt(this.state.hp), 'lower');\n            }}\n          >\n            Damage\n          </button>\n          <button\n            style={{\n              backgroundColor: '#002245',\n              borderWidth: 0,\n              color: '#1bc97f',\n              fontWeight: 'bold',\n              fontSize: 18,\n              outline: 'none',\n            }}\n            onClick={() => {\n            this.props.updateHealth(this.props.index, parseInt(this.state.hp), 'up');\n          }}\n          >\n            Heal\n          </button>\n\t        <button\n            style={{\n              marginLeft: 150,\n              backgroundColor: '#002245',\n              borderWidth: 0,\n              color: '#16d3d4',\n              fontWeight: 'bold',\n              fontSize: 18,\n              outline: 'none',\n            }}\n            onClick={() => {\n            this.props.duplicate(this.props.index);\n          }}\n          >\n            Duplicate\n          </button>\n          <button\n            style={{\n              marginLeft: 10,\n              backgroundColor: '#002245',\n              borderWidth: 0,\n              color: '#5087ec',\n              fontWeight: 'bold',\n              fontSize: 18,\n              outline: 'none',\n            }}\n            onClick={() => {\n            this.props.remove(this.props.index);\n          }}\n          >\n            Remove\n          </button>\n        </p>\n        <div\n          style={{\n            position: 'relative',\n            width: 300,\n            height: 30,\n            backgroundColor: 'grey'\n          }}>\n            <div\n            style={{\n              width: `${currentPercent}%`,\n              height: '100%',\n              backgroundColor: this.props.color || '#16d3d4'\n            }}/>\n        \n          <div\n            style={{\n              width: '100%',\n              height: '100%',\n              position:'absolute',\n              top: 0\n            }}>\n            <button\n              style={{\n                width: '50%',\n                height:'100%',\n                opacity: 0\n              }}\n              onClick={() => this.props.updateHealth(this.props.index, 1, 'lower')}\n              >\n              </button>\n            <button\n              style={{\n                width: '50%',\n                height:'100%',\n                opacity: 0\n              }}\n              onClick={() => this.props.updateHealth(this.props.index, 1, 'up')}\n              >\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default listEncounter;\n","/* eslint-disable default-case */\nimport React from 'react';\nimport ListEncounter from './ListEncounter.jsx'\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name:'',\n      heathPoint: 1,\n      encounter: JSON.parse(localStorage.getItem('listEncounter')) || [],\n      color: [\n        '#ff3064', '#16d3d4', '#1bc97f', '#fec925', '#eb32bc', '#5087ec'\n      ]\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClick(e) {\n    let listEncounter = this.state.encounter;\n    listEncounter.push({\n      name:this.state.name,\n      maxHealth:this.state.heathPoint,\n      currentHealth:this.state.heathPoint\n    });\n\n    this.setState({\n      name:'',\n      heathPoint: 1,\n      encounter: listEncounter,\n    }, () => {\n      this.saveDataLocal(listEncounter);\n    })\n    e.preventDefault();\n  }\n\n  updateHealth = (i, value, type) => {\n    const updateHealth = this.state.encounter;\n    switch (type) {\n      case 'up':\n        if(parseInt(updateHealth[i].currentHealth) + value <= updateHealth[i].maxHealth) {\n          updateHealth[i].currentHealth = JSON.stringify(parseInt(updateHealth[i].currentHealth) + value);\n        }\n        this.setState({\n          encounter: updateHealth\n        },() => {\n          this.saveDataLocal(updateHealth);\n        });\n        break;\n      case 'lower':\n        if(parseInt(updateHealth[i].currentHealth) - value >= 0) {\n          updateHealth[i].currentHealth = JSON.stringify(parseInt(updateHealth[i].currentHealth) - value);\n        }\n        this.setState({\n          encounter: updateHealth\n        },() => {\n          this.saveDataLocal(updateHealth);\n        });\n        break;\n    }\n  }\n\n  saveDataLocal = (listEncounter) => {\n    localStorage.setItem('listEncounter', JSON.stringify(listEncounter))\n  }\n\n  selectColorBar = (i) => {\n    if (i >= this.state.color.length) {\n      return this.state.color[i % this.state.color.length];\n    }\n    return this.state.color[i];\n  }\n\n  clearAll = () => {\n    this.setState({\n      encounter: [],\n    }, () => {\n      this.saveDataLocal([])\n    })\n  }\n\n\n  render() {\n    document.body.style.backgroundColor = \"#002245\";\n\n    return (\n      <div style={{padding: 20, display: 'flex', flexDirection: 'column'}}>\n        <div>\n          <form \n            style={{\n              padding: 0,\n              display: 'flex',\n              flexDirection: 'column',\n              backgroundColor:'#002245'\n            }}>\n            <label style={{color: '#fff'}}>\n              Name : \n              <input\n                name=\"name\"\n                type=\"text\"\n                style={{\n                  marginTop: 10,\n                  borderWidth: 0,\n                  borderBottomWidth: 1,\n                  outline: 'none',\n                  marginInline: 10,\n                  paddingInline: 5,\n                  borderColor: '#fff',\n                  backgroundColor: '#002245',\n                  color: '#fff'\n                }}\n                value={this.state.name}\n                onChange={this.handleInputChange} />\n            </label>\n            <label style={{color: '#fff'}}>\n              HealthPoint :\n              <input\n                min={1}\n                name=\"heathPoint\"\n                type=\"number\"\n                style={{\n                  marginTop: 20,\n                  width: 105,\n                  borderWidth: 0,\n                  borderBottomWidth: 1,\n                  outline: 'none',\n                  marginInline: 10,\n                  paddingInline: 5,\n                  borderColor: '#fff',\n                  backgroundColor: '#002245',\n                  color: '#fff'\n                }}\n                value={this.state.heathPoint}\n                onChange={this.handleInputChange} />\n            </label>\n          <button \n            onClick={this.handleClick}\n            style={{\n              marginTop: 10,\n              backgroundColor: '#002245',\n              width: 100,\n              borderWidth: 0,\n              color: '#16d3d4',\n              fontWeight: 'bold',\n              fontSize: 18,\n              outline: 'none',\n            }}\n          >\n              Create\n            </button>\n        </form>\n        <button\n          onClick={() => this.clearAll()}\n          style={{\n              marginTop: 5,\n              backgroundColor: '#002245',\n              borderWidth: 0,\n              width: 100,\n              color: '#fec925',\n              fontWeight: 'bold',\n              fontSize: 18,\n              outline: 'none',\n            }}\n        >\n          Clear all\n        </button>\n        </div>\n        <div>\n          {this.state.encounter.map((value,index) => (\n             <ListEncounter\n              key={index}\n              encounter={value}\n              index={index}\n              color={this.selectColorBar(index)}\n              updateHealth={(i, value, type) => this.updateHealth(i, value, type)}\n              duplicate={(i) => {\n                const listEncounter = this.state.encounter;\n                listEncounter.push(listEncounter[i]);\n                this.setState({\n                  encounter: listEncounter\t\t\n                }, () => {\n                this.saveDataLocal(listEncounter);\n                })\n              }}\n              remove={(i) => {\n                const listEncounter = this.state.encounter;\n                listEncounter.splice(i,1);\n                this.setState({\n                  encounter: listEncounter\n                },() => {\n                  this.saveDataLocal(listEncounter);\n                })\n              }}\n            />\n            ))\n          }\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode style={{display: 'flex', height: '100%'}}>\n    <App style={{display: 'flex', height: '100%'}}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}