{"version":3,"sources":["HealthBar.jsx","ListEncounter.jsx","App.js","reportWebVitals.js","index.js"],"names":["Healthbar","props","calculOverHealth","current","max","parseInt","generateColorBar","health","state","ProgressBar","animated","variant","this","now","React","Component","listEncounter","hp","undefined","handleInputChange","bind","event","target","value","name","setState","encounter","Container","Row","Col","style","marginBottom","Badge","className","pill","currentHealth","maxHealth","HealthBar","marginTop","withName","sm","Form","Control","min","width","placeholder","type","onChange","DropdownButton","id","title","Dropdown","Item","onClick","updateHealth","index","as","disabled","duplicate","remove","App","i","JSON","stringify","saveDataLocal","localStorage","setItem","clearAll","heathPoint","parse","getItem","handleClick","e","push","window","alert","preventDefault","lg","md","sd","xs","Button","map","ListEncounter","newEncounter","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","display","height","document","getElementById"],"mappings":"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","file":"static/js/main.b2ff9f80.chunk.js","sourcesContent":["import React from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nclass Healthbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    \n    };\n    // this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  calculOverHealth = () => {\n    const { current, max } = this.props;\n    if(parseInt(current) > parseInt(max)) {\n      const overHeal = current - max;\n      const overPercent = (overHeal * 100) / max\n\n      return overPercent;\n    }\n\n    return 0;\n  }\n\n  generateColorBar = () => {\n    const health = (this.props.current * 100) / this.props.max\n    if(health >= 50) {\n      return \"success\";\n    }\n    if(health >= 30) {\n      return \"warning\";\n    }\n    else {\n      return \"danger\"\n    }\n  }\n\n  render() {\n    return (\n      <ProgressBar>\n        <ProgressBar animated variant={this.generateColorBar()} now={((this.props.current * 100) / this.props.max) - this.calculOverHealth()} key={1} />\n        <ProgressBar variant=\"info\" now={this.calculOverHealth()} animated key={2} />\n      </ProgressBar>\n    );\n  }\n\n}\n\nexport default Healthbar;\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Badge from 'react-bootstrap/Badge';\nimport DropdownButton from 'react-bootstrap/DropdownButton';\nimport Dropdown from 'react-bootstrap/Dropdown';\nimport HealthBar from './HealthBar';\n\nclass listEncounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hp: undefined\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  render() {\n    const {encounter} = this.props;\n    return (\n      <Container>\n        <Row>\n          <Col style={{marginBottom: 10}}>\n            <Badge className=\"float-left\" pill variant=\"info\">{encounter.name}</Badge>\n            <Badge className=\"float-right\" pill variant=\"info\">{`${encounter.currentHealth} / ${encounter.maxHealth}`}</Badge>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <HealthBar\n              style={{marginTop: encounter.name ? 0 : 23}}\n              current={encounter.currentHealth}\n              max={encounter.maxHealth}\n              withName={encounter.name ? 1 : 0}\n            />\n          </Col>\n        </Row>\n        <Row style={{marginTop: 10}}>\n          <Col sm={3}>\n            <Form.Control\n              min={1}\n              style={{width: '100%'}}\n              name=\"hp\"\n              placeholder=\"Hp\"\n              type=\"number\"\n              value={this.state.hp}\n              onChange={this.handleInputChange}\n            />\n          </Col>\n          <Col sm={3}>\n            <DropdownButton id=\"action-button\" title=\"Action\" variant=\"info\">\n              <Dropdown.Item onClick={() => this.props.updateHealth(this.props.index, parseInt(this.state.hp), 'lower')} as=\"button\">Damage</Dropdown.Item>\n              <Dropdown.Item onClick={() => this.props.updateHealth(this.props.index, parseInt(this.state.hp), 'up')} as=\"button\">Heal</Dropdown.Item>\n              <Dropdown.Item disabled onClick={() => this.props.duplicate(this.props.index)} as=\"button\">Duplicate</Dropdown.Item>\n              <Dropdown.Item onClick={() => this.props.remove(this.props.index)} as=\"button\">Remove</Dropdown.Item>\n            </DropdownButton>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n}\n\nexport default listEncounter;\n","/* eslint-disable default-case */\nimport React from 'react';\nimport ListEncounter from './ListEncounter.jsx'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name:'',\n      heathPoint: undefined,\n      encounter: JSON.parse(localStorage.getItem('listEncounter')) || [],\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleClick(e) {\n    let listEncounter = this.state.encounter;\n    if(this.state.heathPoint) {\n      listEncounter.push({\n        name:this.state.name,\n        maxHealth:this.state.heathPoint,\n        currentHealth:this.state.heathPoint\n      });\n\n      this.setState({\n        name:'',\n        heathPoint: 1,\n        encounter: listEncounter,\n      }, () => {\n        this.saveDataLocal(listEncounter);\n      })\n    } else {\n      window.alert(\"Health data can't be empty !\")\n    }\n   \n    e.preventDefault();\n  }\n\n  updateHealth = (i, value, type) => {\n    const updateHealth = this.state.encounter;\n    switch (type) {\n      case 'up':\n        updateHealth[i].currentHealth = JSON.stringify(parseInt(updateHealth[i].currentHealth) + value);\n        this.setState({\n          encounter: updateHealth\n        },() => {\n          this.saveDataLocal(updateHealth);\n        });\n        break;\n      case 'lower':\n        if(parseInt(updateHealth[i].currentHealth) - value >= 0) {\n          updateHealth[i].currentHealth = JSON.stringify(parseInt(updateHealth[i].currentHealth) - value);\n        } else {\n          updateHealth[i].currentHealth = JSON.stringify(0)\n        }\n        \n        this.setState({\n          encounter: updateHealth\n        },() => {\n          this.saveDataLocal(updateHealth);\n        });\n        break;\n    }\n  }\n\n  saveDataLocal = (listEncounter) => {\n    localStorage.setItem('listEncounter', JSON.stringify(listEncounter))\n  }\n\n\n  clearAll = () => {\n    this.setState({\n      encounter: [],\n    }, () => {\n      this.saveDataLocal([])\n    })\n  }\n\n\n  render() {\n\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <Container>\n              <Form>\n                <Form.Row className=\"align-items-center\">\n                  <Col lg={4} md={6} sd={12}>\n                    <Form.Control\n                        placeholder=\"Name\"\n                        name=\"name\"\n                        type=\"text\"\n                        value={this.state.name}\n                        onChange={this.handleInputChange}  \n                      />\n                  </Col>\n                  <Col lg={4} md={6} sd={12}>\n                    <Form.Control\n                        placeholder=\"Healthpoint\"\n                        name=\"heathPoint\"\n                        type=\"number\"\n                        value={this.state.heathPoint}\n                        onChange={this.handleInputChange}\n                      />\n                  </Col>\n                  <Col xs=\"auto\" className=\"my-1\">\n                    <Button onClick={this.handleClick} variant=\"primary\" type=\"submit\">Create</Button>\n                  </Col>\n                  <Col xs=\"auto\" className=\"my-1\">\n                    <Button onClick={() => this.clearAll()} variant=\"danger\">Clear all</Button>\n                  </Col>\n                </Form.Row>\n              </Form>\n            </Container>\n          </Col>\n        </Row>\n        <Row style={{marginTop: 20}}>\n          {this.state.encounter.map((value,index) => (\n            <Col key={index} lg={6} md={8} sd={12}>\n              <ListEncounter\n                encounter={value}\n                index={index}\n                updateHealth={(i, value, type) => this.updateHealth(i, value, type)}\n                duplicate={(i) => {\n                  const listEncounter = this.state.encounter;\n                  const newEncounter = listEncounter[i];\n                  listEncounter.push(newEncounter);\n                  this.setState({\n                    encounter: listEncounter\t\t\n                  }, () => {\n                  this.saveDataLocal(listEncounter);\n                  })\n                }}\n                remove={(i) => {\n                  const listEncounter = this.state.encounter;\n                  listEncounter.splice(i,1);\n                  this.setState({\n                    encounter: listEncounter\n                  },() => {\n                    this.saveDataLocal(listEncounter);\n                  })\n                }}\n              />\n            </Col>\n              ))\n            }\n        </Row>\n      </Container>\n      \n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode style={{display: 'flex', height: '100%'}}>\n    <App style={{display: 'flex', height: '100%'}}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}